const mongoose = require('mongoose');
const uuidv4 = require('uuid').v4;

const TELEPORT_TOKEN_IN_CALENDAR_EVENT_ID = 'tlprt';
const Schema = mongoose.Schema;

const CalendarEventSchema = Schema({
    userId:{
        type: Schema.Types.ObjectID,
        required: true
    },
    startDateTime:{
        type: Date,
        required: true
    },
    endDateTime:{
        type: Date,
        required: true
    },
    status:{
        type: String,
        enum: ['available', 'focus', 'busy'],
        required: true,
        default: 'busy'
    },
    externalIdentifier: {
        type: String,
        required: true
    },
    title: {
        type: String,
        required: true,
        default: 'New Event'
    },
    description: {
        type: String
    }
});
const generateTitleForStatus = function(status) {
    let title = null;
    switch (status) {
        case 'focus':
        {
            title = 'Not available - Focus slot';
            break;
        }
        case 'available':
        {
            title = 'Available - Communication slot';
            break;
        }
    }
    return title;
};
const generateDescriptionForStatus = function(status){
    return 'Generated by Teleport. Your remote working assistant.';
};

CalendarEventSchema.statics.eventFromTimeSlot = function(timeSlot) {
    const CalendarEventModel = new mongoose.model('calendar event', CalendarEventSchema);
    return new CalendarEventModel({
        startDateTime: new Date(timeSlot.start),
        endDateTime: new Date(timeSlot.end),
        status: timeSlot.status,
        title: generateTitleForStatus(timeSlot.status),
        description: generateDescriptionForStatus(timeSlot.status),
        externalIdentifier: `${uuidv4().replace(/-/g, '')}${TELEPORT_TOKEN_IN_CALENDAR_EVENT_ID}`
    });
};
CalendarEventSchema.statics.findEventsBetweenTwoTimestamps = async function (userId, startTimestamp, endTimestamp) {
    const CalendarEventModel = new mongoose.model('calendar event', CalendarEventSchema);
    const startDate = new Date(parseInt(startTimestamp));
    const endDate =  new Date(parseInt(endTimestamp));
    return await CalendarEventModel.find({
        userId,
        $and:[
            {startDateTime: {$gte:startDate}},
            {endDateTime: {$lte:endDate}}
        ]
    });
};

module.exports = new mongoose.model('calendar event', CalendarEventSchema);;